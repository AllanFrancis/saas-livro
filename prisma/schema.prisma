// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL") // Replace with your SQL Server connection URL
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Configuração para evitar criação de novo banco
}

generator client {
  provider = "prisma-client-js"
}

model UserRole {
  role String @id
}

model User {
  id                     String    @id @default(uuid())
  name                   String?
  email                  String    @unique
  emailVerified          DateTime?
  image                  String?
  role                   String    @default("DEFAULT")
  password               String?
  isTwoFactorAuthEnabled Boolean   @default(false)
  twoFactorAuthVerified  DateTime?
  accounts               Account[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.VarChar(1024)
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(uuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}